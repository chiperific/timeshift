This product is a Time tracking application for the explicit use of West Michigan Refugee Education and Cultural Center. created 2014 by Chiperific.

==Last completed step:
** TS_Hours::Approved && TS_Cats::Approved became date/time
* Timesheet::index

==Next step:
* StaticPages#Home::_signed_in Needs button for authority_over to manage timesheets for other users.

* application.rb -> class User def self.has_authority_over

* add more to timesheet_pages_spec

==Minor tweaks:
* change date size on review::index page
* _user_form : User can supervise themselves...
* _user_form : requires password on edit?!?
* _user_form : cancel goes to Users#show always -- with is_current_user == false, should go to Users#index.



* create timesheet_hours controller / specs
* create timesheet_categories controller / specs
* Timesheet accepts_nested_attributes_for :timesheet_hours && :timesheet_categories

* Use request info to create a record in TimesheetHours

* sv_or_admin structure

* Spec out Destroy actions for: user, Dept, Cat, request  - maybe not??
* Destroy actions for: user, Dept, Cat, request - maybe not??


==Keep in mind:
* http://weblog.jamisbuck.org/2006/10/18/skinny-controller-fat-model
* You have a datepicker: http://bootstrap-datepicker.readthedocs.org/en/release/index.html
* Rails knows week numbers: http://stackoverflow.com/questions/4389395/how-do-i-get-a-date-from-a-week-number && http://ruby-doc.org/stdlib-2.1.2/libdoc/date/rdoc/Date.html#method-c-commercial

==To do:
3. Page-by-page permissions. Check out CanCan

6. Timesheet (CRU)

7. Timesheet approval (RU)
  a. Supervisors approve their directs.
  b. Admins can approve over supervisors or edit approvals
  c. salary needs to be portrayed into $/payperiod
  d. some sort of global variable for cotrolling weekly/biweekly payperiod (26 vs 52).
  e. user variable for cotrolling salary vs. hourly: pay_type: true = salary, false = hourly

8. Reports
8.1 http://guides.rubyonrails.org/active_record_querying.html#retrieving-multiple-objects

==Add-ons:
1. Progress bars:
    a. # of total hours you worked --> (categorize hours) --> updates progress bar 
<div class="progress">
  <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: 40%">
    <span class="sr-only">40% Complete (success)</span>
  </div>
</div>

2. Submit all new requests - http://stackoverflow.com/questions/21533518/rails-submit-multiple-forms-on-same-page -- search for  '# Future'
2.1 may need to make a parent model for requests to do a nested form... RequestBatch?

==Ongoing issues:
* Controllers are fat and messy...
* Would be nice if User class had some custom methods available to view...
** User.has_authority_over